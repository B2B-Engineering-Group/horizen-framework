/**
 * __пожалуйста прочитайте все__. Это шаблонный контроллер с описанием всех параметров.
 * Когда на сервер приходит API запрос, выполняется один из таких контроллеров.
 * 
 * 1. Контроллеры которые находятся в этой папке автоматически импортируются 
 * в процесс при запуске, но их все еще необходимо подключить.
 * 
 * 2. Контроллеры работают только по методам POST (90% случаев) и GET (10% случаев, 
 * обычно для геттеров файлов). Метод указывается в процессе при подключении.
 * 
 * 3. Статус ответа на запрос всегда 200, даже если произошла ошибка (если процесс не упал).
 * 
 * 4. Контроллеры необходимо тестировать через e2e тесты процесса, эмулируя 
 * бизнес-цепочки пути пользователя.
 * 
 * 5. Старайтесь оставлять в контроллерах минимум логики, необходимо выносить максимум в сервисы.
 **/
export default function({db, bankExample}){//Зависимости (сервисы) передаются через функцию процесса
	return {
		endpoint: "/api/getHello",//Путь по которому слушаем запросы

		//Тип авторизации, в данном случае авторизация скипается.
		//Если указать "authorized", автоматически заведется.
		//Доступы при ввторизации управляются внешним модулем (RBAC).
		auth: "bypass",

		//Описание контроллера, своими словами
		description: "Возвращает приветствие",

		//Список кастомных ошибок.
		errors: {
			"customError": "Описание кастомной ошибки"
		},
		
		//Схема запроса. Если запрос не будет соответствовать схеме, будет отправлена ошибка валидатора.
		//Если в config.json есть debug: true, ответ будет дополнен информацией о месте ошибки.
		reqSchema: ({string, object, array, number, any}, {anyString})=> ({
			example: string(/.{1,100}/).optional(),
		}),

		//Схема ответа. Если ответ не будет соответствовать схеме, процесс упадет
		resSchema: ({string, object, array, number, any}, {anyString})=> ({
			text: anyString()
		}),

		//Если запрос прошел проверки (валидация, доступ), будет выполнен контроллер
		//В body лежат POST параметры, либо GET параметры.
		//В auth лежит userId если запрос прошел авторизацию
		controller: async function({body, auth}){
			
			//Запрос к коллекции demo в mongoDB (используйте методы классического драйвера)
			//await db("demo").insert({text: "Hello world!"});
			//await db("demo").find({}).toArray();

			//throw new Error("customError"); - Вызов кастомной ошибки из объекта errors.
			//В ответе придет {errored: true, code: "customError", text: "Описание кастомной ошибки"}
			//Если вы вызовете ошибку которой нет в описании, придет code: "500", text: "internal server error"

			//Объект который нужно отправить в ответе
			//Учитывайте, что он будет кастомизирован под {success: true, result: {...то что вы укажете ниже}}
			return {text: "Hello world! " + body.example}

		}
	}
}